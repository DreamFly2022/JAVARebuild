// 使用proto3语言
syntax = "proto3";

// 指定生成Java代码的包文件
option java_package = "com.hef.demo.grpc.api";
// 指定生成多个Java文件
option java_multiple_files = true;
// 指定生成Java文件的类名
option java_outer_classname = "RouteGuideProto";

// 定义服务
service RouteGuide {
  /*
   1. 在服务的内部定义rpc方法，并指定这些方法的请求参数和响应参数类型。
   2. gRPC允许我们定义四种服务方法，这四种服务方法都能应用在 RouteGuide中。
   */
  // 一个简单的RPC：一个客户端使用存根向服务端发送一个请求，然后等待响应，就想正常的方法调用。
  rpc GetFeature(Point) returns (Feature) {}

  // 一个服务端流形式的RPC： 客户端发送一个请求给服务端，然后获取到一个用户读取一系列返回消息的流。
  // 客户端读取返回消息的流知道没有任何数据。
  // 通过放置关键词 stream 在返回值类型
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // 一个客户端流形式的RPC：客户端通过流的形式写入一系列消息给服务端。一旦消息写入完成，就会等待服务端读取完它们然后返回。
  // 通过放置关键词 stream 在请求参数类型前面
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // 一个双向流的PRC：客户端和服务端都通过读写流发送一系列消息
  // 两个流操作是独立的，因此客户端和服务端可以按照它们喜欢的任何方式进行读写操作。
  // 例如：服务端能够等到接受完所有的消息之前写入消息，也可以轮流的读取一个消息然后写入一个消息。
  // 消息的顺序被保存在每个流中
  // 通过在请求参数类型和返回参数类型前放置stream关键词：
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}


}

message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

message Feature {
  string name = 1;
  Point location = 2;
}

message Rectangle {
  Point lo = 1;
  Point hi = 2;
}

message RouteSummary {
  int32 point_count = 1;
  int32 feature_count = 2;
  int32 distance = 3;
  int32 elapsed_time = 4;
}

message RouteNote {
  Point location = 1;
  string message = 2;
}

// 在RPC中未使用。相反，这个是序列化到磁盘的格式
// 本案例中：读取带有Feature列表的JSON文件数据，创建出Feature数据列表
message FeatureDatabase {
  repeated Feature feature = 1;
}